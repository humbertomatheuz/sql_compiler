# Generated from EasySQL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,255,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,
        17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,3,24,216,8,24,1,25,1,25,5,25,220,8,25,
        10,25,12,25,223,9,25,1,26,4,26,226,8,26,11,26,12,26,227,1,26,1,26,
        4,26,232,8,26,11,26,12,26,233,3,26,236,8,26,1,27,1,27,5,27,240,8,
        27,10,27,12,27,243,9,27,1,27,1,27,1,28,1,28,1,29,4,29,250,8,29,11,
        29,12,29,251,1,29,1,29,1,241,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,48,57,3,0,9,10,13,13,32,32,264,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,69,1,0,0,0,5,73,1,0,
        0,0,7,76,1,0,0,0,9,81,1,0,0,0,11,92,1,0,0,0,13,94,1,0,0,0,15,96,
        1,0,0,0,17,104,1,0,0,0,19,115,1,0,0,0,21,130,1,0,0,0,23,143,1,0,
        0,0,25,145,1,0,0,0,27,147,1,0,0,0,29,149,1,0,0,0,31,151,1,0,0,0,
        33,153,1,0,0,0,35,156,1,0,0,0,37,159,1,0,0,0,39,162,1,0,0,0,41,166,
        1,0,0,0,43,172,1,0,0,0,45,177,1,0,0,0,47,189,1,0,0,0,49,215,1,0,
        0,0,51,217,1,0,0,0,53,225,1,0,0,0,55,237,1,0,0,0,57,246,1,0,0,0,
        59,249,1,0,0,0,61,62,5,77,0,0,62,63,5,79,0,0,63,64,5,83,0,0,64,65,
        5,84,0,0,65,66,5,82,0,0,66,67,5,65,0,0,67,68,5,82,0,0,68,2,1,0,0,
        0,69,70,5,80,0,0,70,71,5,79,0,0,71,72,5,82,0,0,72,4,1,0,0,0,73,74,
        5,68,0,0,74,75,5,69,0,0,75,6,1,0,0,0,76,77,5,79,0,0,77,78,5,78,0,
        0,78,79,5,68,0,0,79,80,5,69,0,0,80,8,1,0,0,0,81,82,5,73,0,0,82,83,
        5,78,0,0,83,84,5,83,0,0,84,85,5,69,0,0,85,86,5,82,0,0,86,87,5,73,
        0,0,87,88,5,82,0,0,88,89,5,32,0,0,89,90,5,69,0,0,90,91,5,77,0,0,
        91,10,1,0,0,0,92,93,5,40,0,0,93,12,1,0,0,0,94,95,5,41,0,0,95,14,
        1,0,0,0,96,97,5,86,0,0,97,98,5,65,0,0,98,99,5,76,0,0,99,100,5,79,
        0,0,100,101,5,82,0,0,101,102,5,69,0,0,102,103,5,83,0,0,103,16,1,
        0,0,0,104,105,5,82,0,0,105,106,5,69,0,0,106,107,5,77,0,0,107,108,
        5,79,0,0,108,109,5,86,0,0,109,110,5,69,0,0,110,111,5,82,0,0,111,
        112,5,32,0,0,112,113,5,68,0,0,113,114,5,69,0,0,114,18,1,0,0,0,115,
        116,5,68,0,0,116,117,5,69,0,0,117,118,5,76,0,0,118,119,5,69,0,0,
        119,120,5,84,0,0,120,121,5,65,0,0,121,122,5,82,0,0,122,123,5,32,
        0,0,123,124,5,84,0,0,124,125,5,65,0,0,125,126,5,66,0,0,126,127,5,
        69,0,0,127,128,5,76,0,0,128,129,5,65,0,0,129,20,1,0,0,0,130,131,
        5,67,0,0,131,132,5,82,0,0,132,133,5,73,0,0,133,134,5,65,0,0,134,
        135,5,82,0,0,135,136,5,32,0,0,136,137,5,84,0,0,137,138,5,65,0,0,
        138,139,5,66,0,0,139,140,5,69,0,0,140,141,5,76,0,0,141,142,5,65,
        0,0,142,22,1,0,0,0,143,144,5,44,0,0,144,24,1,0,0,0,145,146,5,69,
        0,0,146,26,1,0,0,0,147,148,5,61,0,0,148,28,1,0,0,0,149,150,5,60,
        0,0,150,30,1,0,0,0,151,152,5,62,0,0,152,32,1,0,0,0,153,154,5,60,
        0,0,154,155,5,61,0,0,155,34,1,0,0,0,156,157,5,62,0,0,157,158,5,61,
        0,0,158,36,1,0,0,0,159,160,5,33,0,0,160,161,5,61,0,0,161,38,1,0,
        0,0,162,163,5,73,0,0,163,164,5,78,0,0,164,165,5,84,0,0,165,40,1,
        0,0,0,166,167,5,70,0,0,167,168,5,76,0,0,168,169,5,79,0,0,169,170,
        5,65,0,0,170,171,5,84,0,0,171,42,1,0,0,0,172,173,5,67,0,0,173,174,
        5,72,0,0,174,175,5,65,0,0,175,176,5,82,0,0,176,44,1,0,0,0,177,178,
        5,86,0,0,178,179,5,65,0,0,179,180,5,82,0,0,180,181,5,67,0,0,181,
        182,5,72,0,0,182,183,5,65,0,0,183,184,5,82,0,0,184,185,5,40,0,0,
        185,186,5,53,0,0,186,187,5,48,0,0,187,188,5,41,0,0,188,46,1,0,0,
        0,189,190,5,84,0,0,190,191,5,69,0,0,191,192,5,88,0,0,192,193,5,84,
        0,0,193,48,1,0,0,0,194,195,5,83,0,0,195,196,5,79,0,0,196,197,5,77,
        0,0,197,216,5,65,0,0,198,199,5,67,0,0,199,200,5,79,0,0,200,201,5,
        78,0,0,201,202,5,84,0,0,202,203,5,65,0,0,203,216,5,82,0,0,204,205,
        5,77,0,0,205,206,5,69,0,0,206,207,5,68,0,0,207,208,5,73,0,0,208,
        216,5,65,0,0,209,210,5,77,0,0,210,211,5,65,0,0,211,216,5,88,0,0,
        212,213,5,77,0,0,213,214,5,73,0,0,214,216,5,78,0,0,215,194,1,0,0,
        0,215,198,1,0,0,0,215,204,1,0,0,0,215,209,1,0,0,0,215,212,1,0,0,
        0,216,50,1,0,0,0,217,221,7,0,0,0,218,220,7,1,0,0,219,218,1,0,0,0,
        220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,52,1,0,0,0,223,
        221,1,0,0,0,224,226,7,2,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,
        225,1,0,0,0,227,228,1,0,0,0,228,235,1,0,0,0,229,231,5,46,0,0,230,
        232,7,2,0,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,
        234,1,0,0,0,234,236,1,0,0,0,235,229,1,0,0,0,235,236,1,0,0,0,236,
        54,1,0,0,0,237,241,5,39,0,0,238,240,9,0,0,0,239,238,1,0,0,0,240,
        243,1,0,0,0,241,242,1,0,0,0,241,239,1,0,0,0,242,244,1,0,0,0,243,
        241,1,0,0,0,244,245,5,39,0,0,245,56,1,0,0,0,246,247,5,59,0,0,247,
        58,1,0,0,0,248,250,7,3,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,
        1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,254,6,29,0,0,254,60,
        1,0,0,0,8,0,215,221,227,233,235,241,251,1,6,0,0
    ]

class EasySQLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    AGREGADOR = 25
    IDENTIFICADOR = 26
    NUMERO = 27
    STRING = 28
    SEMICOLON = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'MOSTRAR'", "'POR'", "'DE'", "'ONDE'", "'INSERIR EM'", "'('", 
            "')'", "'VALORES'", "'REMOVER DE'", "'DELETAR TABELA'", "'CRIAR TABELA'", 
            "','", "'E'", "'='", "'<'", "'>'", "'<='", "'>='", "'!='", "'INT'", 
            "'FLOAT'", "'CHAR'", "'VARCHAR(50)'", "'TEXT'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "AGREGADOR", "IDENTIFICADOR", "NUMERO", "STRING", "SEMICOLON", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "AGREGADOR", "IDENTIFICADOR", 
                  "NUMERO", "STRING", "SEMICOLON", "WS" ]

    grammarFileName = "EasySQL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


